*base16-pro-max.nvim* Base16 for modern Neovim — not just colors.

base16-pro-max.nvim is a highly configurable colorscheme engine for Neovim that
aims to not only covers base16 colorschemes, but also include features
that are built-in to most colorscheme plugins (e.g. dim_inactive_windows,
blends, italics, custom highlights, etc.)

It allows defining a semantic color palette, generating highlight
groups automatically, and integrating with popular plugins.

# Features ~
 - Complete Base16 Implementation: Full support for the Base16 specification with semantic aliases
 - Modern Styling Options: Transparency, italics, bold text, window dimming, and blend modes
 - Extensive Plugin Support: Native integrations for popular Neovim plugins
 - Semantic Color Groups: Intuitive color organization for backgrounds, syntax, states, diff, and search
 - Runtime Validation: Comprehensive configuration validation with helpful error messages
 - Performance Optimized: Efficient caching and minimal runtime overhead
 - Highly Customizable: Override any aspect through configuration or runtime functions

# Setup ~

This module needs to be set up with `require('base16-pro-max').setup({})` (replace
`{}` with your `config` table).

see also |base16-pro-max.setup|

# Quick Start ~

>lua
   -- Minimal setup with Kanagawa-inspired colors
   {
     "y3owk1n/base16-pro-max.nvim",
     priority = 1000,
     config = function()
       require("base16-pro-max").setup {
         colors = {
           base00 = "#1f1f28", base01 = "#2a2a37", base02 = "#3a3a4e",
           base03 = "#4e4e5e", base04 = "#9e9eaf", base05 = "#c5c5da",
           base06 = "#dfdfef", base07 = "#e6e6f0", base08 = "#ff5f87",
           base09 = "#ff8700", base0A = "#ffaf00", base0B = "#5fff87",
           base0C = "#5fd7ff", base0D = "#5fafff", base0E = "#af87ff",
           base0F = "#d7875f",
         },
         styles = { italic = true, transparency = true },
         plugins = { enable_all = true },
       }
       vim.cmd.colorscheme "base16-pro-max"
     end,
   }
<


==============================================================================
Table of Contents                                      *base16-pro-max.contents*

Types ··················································· |base16-pro-max.types|
Plugin Integrations ··································· |base16-pro-max.plugins|
Setup ··················································· |base16-pro-max.setup|
API ······················································· |base16-pro-max.api|
YAML parser for base16-pro-max ························· |base16-pro-max.parser|

==============================================================================
Types                                                     *base16-pro-max.types*

Base16ProMax.Config                                        *Base16ProMax.Config*

    Fields: ~
        {colors}             (table<Base16ProMax.Group.Raw,string>)                                                          Colors to override
        {styles?}            (Base16ProMax.Config.Styles)                                                                    Styles to override
        {highlight_groups?}  (Base16ProMax.Config.HighlightGroups.Table|Base16ProMax.Config.HighlightGroups.Function)        Additional highlight groups to set
        {before_highlight?}  (fun(group:string,opts:vim.api.keyset.highlight,c:table<Base16ProMax.Group.Alias,string>):nil)  Callback to run before setting highlight groups
        {plugins?}           (Base16ProMax.Config.Plugins)                                                                   Enable/disable plugins
        {color_groups?}      (Base16ProMax.Config.ColorGroups)                                                               Color groups to override
        {setup_globals?}     (Base16ProMax.Config.SetupGlobals)                                                              Setup globals


                                     *Base16ProMax.Config.HighlightGroups.Table*
Base16ProMax.Config.HighlightGroups.Table

    Type: ~
        table<string,vim.api.keyset.highlight>


                                  *Base16ProMax.Config.HighlightGroups.Function*
Base16ProMax.Config.HighlightGroups.Function

    Type: ~
        fun(function_refs:Base16ProMax.Config.HighlightGroups.FunctionRefs):Base16ProMax.Config.HighlightGroups.Table


                              *Base16ProMax.Config.HighlightGroups.FunctionRefs*
Base16ProMax.Config.HighlightGroups.FunctionRefs

    Fields: ~
        {get_group_color_fn}  (fun(group:string,key:string,c:table<Base16ProMax.Group.Alias,string>):string|nil)
        {get_bg_fn}           (fun(bg:string):string|nil)
        {blend_fn}            (fun(fg:string,bg:string,alpha:number):string)
        {styles_config}       (Base16ProMax.Config.Styles)                                                        Styles configuration
        {colors}              (table<Base16ProMax.Group.Alias,string>)                                            Semantic color palette


Base16ProMax.Config.SetupGlobals              *Base16ProMax.Config.SetupGlobals*

    Fields: ~
        {terminal_colors?}    (boolean)  Set terminal colors
        {base16_gui_colors?}  (boolean)  Set base16 gui colors


Base16ProMax.Config.ColorGroups                *Base16ProMax.Config.ColorGroups*

    Fields: ~
        {backgrounds?}  (Base16ProMax.Config.ColorGroups.Backgrounds)  Background colors
        {foregrounds?}  (Base16ProMax.Config.ColorGroups.Foregrounds)  Foreground colors
        {syntax?}       (Base16ProMax.Config.ColorGroups.Syntax)       Syntax colors
        {states?}       (Base16ProMax.Config.ColorGroups.States)       Semantic colors
        {diff?}         (Base16ProMax.Config.ColorGroups.Diff)         Diff colors
        {git?}          (Base16ProMax.Config.ColorGroups.Git)          Git colors
        {search?}       (Base16ProMax.Config.ColorGroups.Search)       Search colors
        {markdown?}     (Base16ProMax.Config.ColorGroups.Markdown)     Markdown colors
        {modes?}        (Base16ProMax.Config.ColorGroups.Modes)        Mode colors


Base16ProMax.Config.ColorGroups.Color    *Base16ProMax.Config.ColorGroups.Color*

    Type: ~
        string|Base16ProMax.Config.ColorGroups.Color.Function


                                *Base16ProMax.Config.ColorGroups.Color.Function*
Base16ProMax.Config.ColorGroups.Color.Function

    Type: ~
        fun(function_refs:Base16ProMax.Config.ColorGroups.Color.FunctionRefs):string


                            *Base16ProMax.Config.ColorGroups.Color.FunctionRefs*
Base16ProMax.Config.ColorGroups.Color.FunctionRefs

    Fields: ~
        {blend_fn}  (fun(fg:string,bg:string,alpha:number):string)  Blend function
        {colors}    (table<Base16ProMax.Group.Alias,string>)        Semantic color palette


                                   *Base16ProMax.Config.ColorGroups.Backgrounds*
Base16ProMax.Config.ColorGroups.Backgrounds

    Fields: ~
        {normal?}         (Base16ProMax.Config.ColorGroups.Color)  Normal background
        {dim?}            (Base16ProMax.Config.ColorGroups.Color)  Dim background
        {light?}          (Base16ProMax.Config.ColorGroups.Color)  Light background
        {selection?}      (Base16ProMax.Config.ColorGroups.Color)  Selection background
        {cursor_line?}    (Base16ProMax.Config.ColorGroups.Color)  Cursor line background
        {cursor_column?}  (Base16ProMax.Config.ColorGroups.Color)  Cursor column background


                                   *Base16ProMax.Config.ColorGroups.Foregrounds*
Base16ProMax.Config.ColorGroups.Foregrounds

    Fields: ~
        {normal?}       (Base16ProMax.Config.ColorGroups.Color)  Normal foreground
        {dim?}          (Base16ProMax.Config.ColorGroups.Color)  Dim foreground
        {dark?}         (Base16ProMax.Config.ColorGroups.Color)  Dark foreground
        {light?}        (Base16ProMax.Config.ColorGroups.Color)  Light foreground
        {bright?}       (Base16ProMax.Config.ColorGroups.Color)  Bright foreground
        {comment?}      (Base16ProMax.Config.ColorGroups.Color)  Comment foreground
        {line_number?}  (Base16ProMax.Config.ColorGroups.Color)  Line number foreground
        {border?}       (Base16ProMax.Config.ColorGroups.Color)  Border


Base16ProMax.Config.ColorGroups.Syntax  *Base16ProMax.Config.ColorGroups.Syntax*

    Fields: ~
        {variable?}       (Base16ProMax.Config.ColorGroups.Color)  Variable foreground
        {constant?}       (Base16ProMax.Config.ColorGroups.Color)  Constant foreground
        {string?}         (Base16ProMax.Config.ColorGroups.Color)  String foreground
        {number?}         (Base16ProMax.Config.ColorGroups.Color)  Number foreground
        {boolean?}        (Base16ProMax.Config.ColorGroups.Color)  Boolean foreground
        {keyword?}        (Base16ProMax.Config.ColorGroups.Color)  Keyword foreground
        {function_name?}  (Base16ProMax.Config.ColorGroups.Color)  Function name foreground
        {type?}           (Base16ProMax.Config.ColorGroups.Color)  Type foreground
        {comment?}        (Base16ProMax.Config.ColorGroups.Color)  Comment foreground
        {operator?}       (Base16ProMax.Config.ColorGroups.Color)  Operator foreground
        {delimiter?}      (Base16ProMax.Config.ColorGroups.Color)  Delimiter foreground
        {deprecated?}     (Base16ProMax.Config.ColorGroups.Color)  Deprecated foreground


Base16ProMax.Config.ColorGroups.States  *Base16ProMax.Config.ColorGroups.States*

    Fields: ~
        {error?}    (Base16ProMax.Config.ColorGroups.Color)  Error foreground
        {warning?}  (Base16ProMax.Config.ColorGroups.Color)  Warning foreground
        {info?}     (Base16ProMax.Config.ColorGroups.Color)  Info foreground
        {hint?}     (Base16ProMax.Config.ColorGroups.Color)  Hint foreground
        {success?}  (Base16ProMax.Config.ColorGroups.Color)  Success foreground


Base16ProMax.Config.ColorGroups.Diff      *Base16ProMax.Config.ColorGroups.Diff*

    Fields: ~
        {added?}    (Base16ProMax.Config.ColorGroups.Color)  Added foreground
        {removed?}  (Base16ProMax.Config.ColorGroups.Color)  Removed foreground
        {changed?}  (Base16ProMax.Config.ColorGroups.Color)  Changed foreground
        {text?}     (Base16ProMax.Config.ColorGroups.Color)  Text foreground


Base16ProMax.Config.ColorGroups.Git        *Base16ProMax.Config.ColorGroups.Git*

    Fields: ~
        {added?}      (Base16ProMax.Config.ColorGroups.Color)  Added foreground
        {removed?}    (Base16ProMax.Config.ColorGroups.Color)  Removed foreground
        {changed?}    (Base16ProMax.Config.ColorGroups.Color)  Changed foreground
        {untracked?}  (Base16ProMax.Config.ColorGroups.Color)  Untracked foreground


Base16ProMax.Config.ColorGroups.Search  *Base16ProMax.Config.ColorGroups.Search*

    Fields: ~
        {match?}        (Base16ProMax.Config.ColorGroups.Color)  Match foreground
        {current?}      (Base16ProMax.Config.ColorGroups.Color)  Current match foreground
        {incremental?}  (Base16ProMax.Config.ColorGroups.Color)  Incremental match foreground


Base16ProMax.Config.ColorGroups.Markdown*Base16ProMax.Config.ColorGroups.Markdown*

    Fields: ~
        {heading1?}  (Base16ProMax.Config.ColorGroups.Color)  Heading 1 foreground
        {heading2?}  (Base16ProMax.Config.ColorGroups.Color)  Heading 2 foreground
        {heading3?}  (Base16ProMax.Config.ColorGroups.Color)  Heading 3 foreground
        {heading4?}  (Base16ProMax.Config.ColorGroups.Color)  Heading 4 foreground
        {heading5?}  (Base16ProMax.Config.ColorGroups.Color)  Heading 5 foreground
        {heading6?}  (Base16ProMax.Config.ColorGroups.Color)  Heading 6 foreground


Base16ProMax.Config.ColorGroups.Modes    *Base16ProMax.Config.ColorGroups.Modes*

    Fields: ~
        {normal?}       (Base16ProMax.Config.ColorGroups.Color)  Normal mode foreground
        {insert?}       (Base16ProMax.Config.ColorGroups.Color)  Insert mode foreground
        {visual?}       (Base16ProMax.Config.ColorGroups.Color)  Visual mode foreground
        {visual_line?}  (Base16ProMax.Config.ColorGroups.Color)  Visual line mode foreground
        {replace?}      (Base16ProMax.Config.ColorGroups.Color)  Replace mode foreground
        {command?}      (Base16ProMax.Config.ColorGroups.Color)  Command mode foreground


Base16ProMax.Config.Styles                          *Base16ProMax.Config.Styles*

    Fields: ~
        {italic?}                (boolean)                            Enable italics
        {bold?}                  (boolean)                            Enable bold text
        {transparency?}          (boolean)                            Transparent background
        {dim_inactive_windows?}  (boolean)                            Dim inactive windows
        {blends?}                (Base16ProMax.Config.Styles.Blends)  Blend values to override
        {use_cterm?}             (boolean)                            Use cterm colors (overrides colors)


Base16ProMax.Config.Styles.Blends            *Base16ProMax.Config.Styles.Blends*

    Fields: ~
        {subtle?}  (number)  barely visible backgrounds (10%)
        {medium?}  (number)  noticeable but not distracting (15%)
        {strong?}  (number)  prominent highlights (25%)
        {super?}   (number)  very prominent highlights (50%)


Base16ProMax.Config.Plugins                        *Base16ProMax.Config.Plugins*

    Fields: ~
        {enable_all?}                                  (boolean)  Enable all plugins
        {nvim_mini_mini_icons?}                        (boolean)  Enable Mini Icons
        {nvim_mini_mini_diff?}                         (boolean)  Enable Mini Diff
        {nvim_mini_mini_files?}                        (boolean)  Enable Mini Files
        {nvim_mini_mini_pick?}                         (boolean)  Enable Mini Pick
        {meandering_programmer_render_markdown_nvim?}  (boolean)  Enable Render Markdown
        {y3owk1n_undo_glow_nvim?}                      (boolean)  Enable Undo Glow
        {y3owk1n_time_machine_nvim?}                   (boolean)  Enable Time Machine
        {saghen_blink_cmp?}                            (boolean)  Enable Blink Cmp
        {magicduck_grug_far_nvim?}                     (boolean)  Enable Grug Far
        {folke_which_key_nvim?}                        (boolean)  Enable Which Key
        {folke_flash_nvim?}                            (boolean)  Enable Flash
        {lewis6991_gitsigns_nvim?}                     (boolean)  Enable Git Signs
        {nvim_telescope_telescope_nvim?}               (boolean)  Enable Telescope
        {ibhagwan_fzf_lua?}                            (boolean)  Enable Fzf Lua
        {nvim_lualine_lualine_nvim?}                   (boolean)  Enable Lualine


Base16ProMax.Group.Raw                                  *Base16ProMax.Group.Raw*

    Variants: ~
        ("base00")  Default background (Semantic Alias: bg)
        ("base01")  Lighter Background (Used for status bars) (Semantic Alias: bg_dim)
        ("base02")  Selection background (Semantic Alias: bg_light)
        ("base03")  Comments, Invisibles, Line Highlighting (Semantic Alias: fg_dim)
        ("base04")  Dark Foreground (Used for status bars) (Semantic Alias: fg_dark)
        ("base05")  Default Foreground, Caret, Delimiters, Operators (Semantic Alias: fg)
        ("base06")  Light foreground (Semantic Alias: fg_light)
        ("base07")  The Lightest Foreground (Semantic Alias: fg_bright)
        ("base08")  Variables, XML Tags, Markup Link Text, Markup Lists, Diff Deleted (Semantic Alias: red)
        ("base09")  Integers, Boolean, Constants, XML Attributes, Markup Link Url (Semantic Alias: orange)
        ("base0A")  Classes, Markup Bold, Search Text Background (Semantic Alias: yellow)
        ("base0B")  Strings, Inherited Class, Markup Code, Diff Inserted (Semantic Alias: green)
        ("base0C")  Support, Regular Expressions, Escape Characters, Markup Quotes (Semantic Alias: cyan)
        ("base0D")  Functions, Methods, Attribute IDs, Headings (Semantic Alias: blue)
        ("base0E")  Keywords, Storage, Selector, Markup Italic, Diff Changed (Semantic Alias: purple)
        ("base0F")  Deprecated, Opening/Closing Embedded Language Tags, e.g. <?php ?> (Semantic Alias: brown)


Base16ProMax.Group.Alias                              *Base16ProMax.Group.Alias*

    Variants: ~
        ("bg")         Default background (Raw Base16ProMax: base00)
        ("bg_dim")     Lighter Background (Used for status bars) (Raw Base16ProMax: base01)
        ("bg_light")   Selection background (Raw Base16ProMax: base02)
        ("fg_dim")     Comments, Invisibles, Line Highlighting (Raw Base16ProMax: base03)
        ("fg_dark")    Dark Foreground (Used for status bars) (Raw Base16ProMax: base04)
        ("fg")         Default Foreground, Caret, Delimiters, Operators (Raw Base16ProMax: base05)
        ("fg_light")   Light foreground (Raw Base16ProMax: base06)
        ("fg_bright")  The Lightest Foreground (Raw Base16ProMax: base07)
        ("red")        Variables, XML Tags, Markup Link Text, Markup Lists, Diff Deleted (Raw Base16ProMax: base08)
        ("orange")     Integers, Boolean, Constants, XML Attributes, Markup Link Url (Raw Base16ProMax: base09)
        ("yellow")     Classes, Markup Bold, Search Text Background (Raw Base16ProMax: base0A)
        ("green")      Strings, Inherited Class, Markup Code, Diff Insert
        ("cyan")       Support, Regular Expressions, Escape Characters, Markup Quotes (Raw Base16ProMax: base0C)
        ("blue")       Functions, Methods, Attribute IDs, Headings (Raw Base16ProMax: base0D)
        ("purple")     Keywords, Storage, Selector, Markup Italic, Diff Changed (Raw Base16ProMax: base0E)
        ("brown")      Deprecated, Opening/Closing Embedded Language Tags, e.g. <?php ?> (Raw Base16ProMax: base0F)


==============================================================================
Plugin Integrations                                     *base16-pro-max.plugins*

# Plugin Integrations ~

This module contains the plugin integrations for `base16-pro-max.nvim`.
All integrations are disabled by default, but can be enabled in the config.

>lua
   require("base16-pro-max").setup({
     plugins = {
       enable_all = true,
     },
   })
<

Or you can enable them individually:

>lua
   require("base16-pro-max").setup({
     plugins = {
       enable_all = false,
       nvim_mini_mini_icons = true
     },
   })
<

## Available Plugins Integrations ~

See also |Base16ProMax.Config.Plugins| for all the plugins that can be enabled or disabled.

Below only shows help for plugins that requires extra setup.

### Lualine ~

>lua
   require("lualine").setup({
     options = {
       theme = "base16-pro-max",
     },
   })
<


==============================================================================
Setup                                                     *base16-pro-max.setup*

# Module setup ~

Note that `colors` in the config table is compulsary and must be provided.

>lua
   require('base16').setup({}) -- replace {} with your config table
<

# Configuration Anotomy ~

All boolean options are `false` and opt-in by default.

 - `colors`: **Required** - the 16 Base 16 hex codes
 - `highlight_groups`: **Optional** - additional highlight groups to set
 - `before_highlight`: **Optional** - callback to run before setting highlight groups
 - `styles`: **Optional** - styling options
 - `plugins`: **Optional** - enable/disable plugins
 - `setup_globals`: **Optional** - setup vim.g globals
 - `color_groups`: **Optional** - semantic color groups

# Colors Table ~

The `colors` table is a mapping of Base16 colors to hex values. The plugin will
automatically validate that all required colors are provided.

>lua
   {
     base00 = "#000000", -- Default background
     base01 = "#000000", -- Lighter background (status bars)
     base02 = "#000000", -- Selection background
     base03 = "#000000", -- Comments, line highlighting
     base04 = "#000000", -- Dark foreground (status bars)
     base05 = "#000000", -- Default foreground
     base06 = "#000000", -- Light foreground
     base07 = "#000000", -- Lightest foreground
     base08 = "#000000", -- Red (variables, errors)
     base09 = "#000000", -- Orange (integers, constants)
     base0A = "#000000", -- Yellow (classes, search)
     base0B = "#000000", -- Green (strings, success)
     base0C = "#000000", -- Cyan (support, regex)
     base0D = "#000000", -- Blue (functions, info)
     base0E = "#000000", -- Purple (keywords, changes)
     base0F = "#000000", -- Brown (deprecated)
   }
<

# Semantic Alias Mapping ~

 - base00 <-> bg
 - base01 <-> bg_dim
 - base02 <-> bg_light
 - base03 <-> fg_dim
 - base04 <-> fg_dark
 - base05 <-> fg
 - base06 <-> fg_light
 - base07 <-> fg_bright
 - base08 <-> red
 - base09 <-> orange
 - base0A <-> yellow
 - base0B <-> green
 - base0C <-> cyan
 - base0D <-> blue
 - base0E <-> purple
 - base0F <-> brown

# Default Configuration ~

>lua
   {
     colors = {}, -- add this with your colors
     highlight_groups = {},
     before_highlight = nil,
     styles = {
       italic = false,
       bold = false,
       transparency = false,
       use_cterm = false,
       dim_inactive_windows = false,
       blends = {
         subtle = 10,
         medium = 15,
         strong = 25,
         super = 50,
       },
     },
     plugins = {
       enable_all = false,
     },
     setup_globals = {
       terminal_colors = false, -- set vim.g.terminal_color_* variables
       base16_gui_colors = false, -- set vim.g.base16_gui* variables
     },
     color_groups = {
       -- Background variations
       backgrounds = {
         normal = "bg",
         dim = "bg_dim",
         light = "bg_light",
         selection = "bg_light",
         cursor_line = function(function_refs)
           return function_refs.blend_fn(function_refs.colors.bg_light, function_refs.colors.bg, 0.6)
         end,
         cursor_column = function(function_refs)
           return function_refs.blend_fn(function_refs.colors.bg_dim, function_refs.colors.bg, 0.3)
         end,
       },

       -- Foreground variations
       foregrounds = {
         normal = "fg",
         dim = "fg_dim",
         dark = "fg_dark",
         light = "fg_light",
         bright = "fg_bright",
         comment = "fg_dark",
         line_number = function(function_refs)
           return function_refs.blend_fn(function_refs.colors.fg_dim, function_refs.colors.bg, 0.7)
         end,
         border = "fg_dim",
       },

       -- Semantic colors for syntax
       syntax = {
         variable = "fg",
         constant = "orange",
         string = "green",
         number = "orange",
         boolean = "orange",
         keyword = "purple",
         function_name = "blue",
         type = "yellow",
         comment = "fg_dark",
         operator = "cyan",
         delimiter = "fg_dark",
         deprecated = "brown",
       },

       -- UI state colors
       states = {
         error = "red",
         warning = "yellow",
         info = "blue",
         hint = "cyan",
         success = "green",
       },

       -- Diff colors
       diff = {
         added = "green",
         removed = "red",
         changed = "orange",
         text = "blue",
       },

       -- Git colors
       git = {
         added = "green",
         removed = "red",
         changed = "orange",
         untracked = "brown",
       },

       -- Search and selection
       search = {
         match = "yellow",
         current = "orange",
         incremental = "orange",
       },

       -- Markdown
       markdown = {
         heading1 = "red",
         heading2 = "orange",
         heading3 = "yellow",
         heading4 = "green",
         heading5 = "cyan",
         heading6 = "blue",
       },

       -- Modes
       modes = {
         normal = "blue",
         insert = "green",
         visual = "yellow",
         visual_line = "yellow",
         replace = "cyan",
         command = "red",
       },
     },
   }
<


M.setup({user_config?})                                                *M.setup*
    Setup the base16-pro-max.nvim plugin

    Parameters: ~
        {user_config?}  (Base16ProMax.Config)

    Returns: ~
        (nil)

    Usage: ~
>lua
        require("base16-pro-max").setup({
          colors = { base00 = "#1f1f28", base01 = "#2a2a37", ... }
        })
<


==============================================================================
API                                                         *base16-pro-max.api*

M.colors()                                                            *M.colors*
    Get the semantic color palette

    Returns: ~
        (table<Base16ProMax.Group.Alias,string>|nil)  The semantic color palette, or nil if not set up


M.get_color({name})                                                *M.get_color*
    Get a specific color by name

    Parameters: ~
        {name}  (Base16ProMax.Group.Alias|Base16ProMax.Group.Raw)  Color name (e.g., "red", "bg", "base08")

    Returns: ~
        (string|nil)  The hex color value, or nil if not found


M.get_colors({names})                                             *M.get_colors*
    Get multiple colors at once

    Parameters: ~
        {names}  (Base16ProMax.Group.Alias[]|Base16ProMax.Group.Raw[])  Array of color names

    Returns: ~
        (table<string,string>)  Map of color names to hex values


M.raw_colors()                                                    *M.raw_colors*
    Get all raw base16 colors

    Returns: ~
        (table<Base16ProMax.Group.Raw,string>|nil)  The raw base16 colors, or nil if not set up


M.color_mapping()                                              *M.color_mapping*
    Get semantic color mapping

    Returns: ~
        (table<Base16ProMax.Group.Alias,Base16ProMax.Group.Raw>)  The semantic to raw color mapping


M.get_group_color({group}, {key})                            *M.get_group_color*
    Get a color from groups

    Parameters: ~
        {group}  (string)  The color group name
        {key}    (string)  The color key within the group

    Returns: ~
        (string|nil)  The resolved color, or nil if not found


M.validate_colors({colors})                                  *M.validate_colors*
    Validate color configuration

    Parameters: ~
        {colors}  (table<Base16ProMax.Group.Raw,string>)  The colors to validate

    Returns: ~
        (boolean)   True if all required colors are present
        (string[])  Array of missing color keys


M.has_plugin({name})                                              *M.has_plugin*
    Check if a plugin is enabled

    Parameters: ~
        {name}  (string)  The plugin name

    Returns: ~
        (boolean)


==============================================================================
YAML parser for base16-pro-max                           *base16-pro-max.parser*

# Module setup ~

This module will be setup automatically if the module is required.
There's no need to call `setup()` manually.

# Usage ~

>lua
  local yaml_parser = require("base16-pro-max.parser")

  -- Load from YAML file
  local colors = yaml_parser.get_base16_colors("~/schemes/gruvbox.yaml")

  -- Mix YAML colors with manual overrides
  local colors = vim.tbl_extend("force",
    yaml_parser.get_base16_colors("~/schemes/base.yaml"),
    {
      base08 = "#ff0000", -- Override red
      base0B = "#00ff00", -- Override green
    }
  )

  -- Conditional loading
  local colors = {}
  local condition = some_condition() -- e.g., vim.fn.filereadable
  if condition then
    colors = yaml_parser.get_base16_colors("~/schemes/custom.yaml")
  else
    -- Fallback to manual colors
    colors = {
      base00 = "#1f1f28", base01 = "#2a2a37", -- ...
    }
  end

  require("base16-pro-max").setup({ colors = colors })
<

# Cache Management ~

Cache is saved to `vim.fn.stdpath("cache") .. "/base16_cache"` with filename of `schemes_cache.lua`

>lua
  local yaml_parser = require("base16-pro-max.parser")

  -- Clear all cached data
  yaml_parser.clear_cache()

  -- Get cache statistics
  local stats = yaml_parser.get_cache_stats()
  print(vim.inspect(stats))
<


M.get_base16_colors({path})                                *M.get_base16_colors*
    Get Base16 colors with optimized filtering

    Parameters: ~
        {path}  (string)

    Returns: ~
        (table)


M.clear_cache()                                                  *M.clear_cache*
    Clear all caches

    Returns: ~
        (nil)


M.get_cache_stats()                                          *M.get_cache_stats*
    Get cache statistics


vim:tw=78:ts=8:noet:ft=help:norl:
